# -*- coding: utf-8 -*-
"""
Created on Sat Apr 26 20:57:12 2025

@author: marko
"""

import customtkinter
from tkinter import *
from tkinter import messagebox

from csv import *
from openpyxl import workbook
import os
import numpy as np
import matplotlib.pyplot as plt
from io import StringIO
import pandas as pd
customtkinter.set_appearance_mode("dark")



# --- Production Well GUI ---
compositionP = customtkinter.CTk()
compositionP.title("Composition of Production well fluid")
compositionP.geometry("400x850")  

# --- Units Selection ---
unit_label_prod = customtkinter.CTkLabel(compositionP, text="Units:")
unit_label_prod.grid(row=0, column=0)

units_var_prod = StringVar(value="mg/L")  # alapértelmezett egység
units_options_prod = ["mg/L", "g/L", "ppm", "ppb", "mol/L", "mmol/L", "mol/kgs", "mmol/kgs" ]

units_menu_prod = customtkinter.CTkOptionMenu(compositionP, variable=units_var_prod, values=units_options_prod)
units_menu_prod.grid(row=0, column=1)

# --- Labels and Entries ---
prod_labels = [
    "ID: ", "Production temperature (°C):", "pH: ", "Ca²⁺: ", "Na⁺: ", "K⁺: ",
    "S²⁻: ", "S⁶⁺ as SO₄²⁻: ", "F⁻: ", "Cl⁻: ", "Br⁻: ", "Li⁺: ", "Mg²⁺: ", 
    "Fe²⁺: ", "Fe³⁺: ", "Mn: ", "Si as H₂SiO₃: ", "Zn: ", "Ba⁺: ", "Pb: ", "Alkalinity as HCO₃⁻: "
]

prod_entries = {}

prod_defaults = {
    "IDP": "Production_well", "TP": "0", "pHP": "7", "CaP": "0", "NaP": "0", "KP": "0",
    "S2P": "0", "S6P": "0", "FP": "0", "ClP": "0", "BrP": "0", "LiP": "0", "MgP": "0",
    "Fe2P": "0", "Fe3P": "0", "MnP": "0", "SiP": "0", "ZnP": "0", "BaP": "0", "PbP": "0", "AlkP": "0"
}

# Create labels and entries
for i, text in enumerate(prod_labels):
    customtkinter.CTkLabel(compositionP, text=text).grid(row=i+1, column=0)  
    entry = Entry(compositionP, width=30, borderwidth=3)
    entry.grid(row=i+1, column=1)
    key = list(prod_defaults.keys())[i] if i < len(prod_defaults) else f"Extra_{i}"
    entry.insert(0, prod_defaults.get(key, "0"))
    prod_entries[key] = entry

# --- Functions ---
def Clear():
    for entry in prod_entries.values():
        entry.delete(0, END)

def regcompprod():
    global IDP, CaP, NaP, KP, pHP, TP, S2P, S6P, FP, ClP, BrP, LiP, MgP, Fe2P, Fe3P, MnP, SiP, ZnP, BaP, PbP, AlkP, unit_selected_prod
    for name in prod_entries:
        globals()[name] = prod_entries[name].get()
    unit_selected_prod = units_var_prod.get()  # elmentjük a kiválasztott egységet is
    messagebox.showinfo("Success", f"Production well ({IDP}) fluid composition saved successfully")

# --- Buttons ---
add = customtkinter.CTkButton(compositionP, text="Add", command=lambda: [regcompprod(), compositionP.quit()])
clear = customtkinter.CTkButton(compositionP, text="Clear", command=Clear)
exitb = customtkinter.CTkButton(compositionP, text="Exit", command=compositionP.quit)

add.grid(row=22, column=0, columnspan=2)
clear.grid(row=23, column=0, columnspan=2)
exitb.grid(row=24, column=0, columnspan=2)

compositionP.mainloop()

# --- Injection Well GUI ---  
compositionI = customtkinter.CTk()  
compositionI.title("Composition of Injection well (reservoir) fluid")  
compositionI.geometry("400x900")  # Extended height for better fit

# --- Units Selection ---  
unit_label_inj = customtkinter.CTkLabel(compositionI, text="Units:")  
unit_label_inj.grid(row=0, column=0)  

units_var_inj = StringVar(value="mg/L")  # Default unit  
units_options_inj =  ["mg/L", "g/L", "ppm", "ppb", "mol/L", "mmol/L", "mol/kgs", "mmol/kgs" ]

units_menu_inj = customtkinter.CTkOptionMenu(compositionI, variable=units_var_inj, values=units_options_inj)  
units_menu_inj.grid(row=0, column=1)  # Units dropdown at row 0

# --- Labels and Entries ---  
inj_labels = [  
    "ID: ", "Reservoir temperature (°C):", "pH: ", "Ca²⁺: ", "Na⁺: ","K⁺: ",  
    "S²⁻: ", "S⁶⁺ as SO₄²⁻:", "F⁻: ", "Cl⁻: ", "Br⁻: ", "Li⁺: ", "Mg²⁺: ",  
    "Fe²⁺: ", "Fe³⁺: ", "Mn: ", "Si as H₂SiO₃: ", "Zn: ", "Ba²⁺: ", "Pb: ", "Alkalinity as HCO₃⁻:"  
]

inj_entries = {}

inj_defaults = {  
    "IDI": "Injection_well", "RT": "100", "pHI": "7", "CaI": "0", "NaI": "0", "KI": "0",  
    "S2I": "0", "S6I": "0", "FI": "0", "ClI": "0", "BrI": "0", "LiI": "0", "MgI": "0",  
    "Fe2I": "0", "Fe3I": "0", "MnI": "0", "SiI": "0", "ZnI": "0", "BaI": "0", "PbI": "0", "AlkI": "0"  
}

# Create labels and entries  
for i, text in enumerate(inj_labels):  
    customtkinter.CTkLabel(compositionI, text=text).grid(row=i+1, column=0)  # Labels start from row 1  
    entry = Entry(compositionI, width=30, borderwidth=3)  
    entry.grid(row=i+1, column=1)  # Entries aligned with labels in column 1  
    key = list(inj_defaults.keys())[i] if i < len(inj_defaults) else f"ExtraI_{i}"  
    entry.insert(0, inj_defaults.get(key, "0"))  
    inj_entries[key] = entry  

# --- Functions ---  
def ClearI():  
    for entry in inj_entries.values():  
        entry.delete(0, END)  

def regcompinj():  
    global IDI, CaI, NaI, KI, pHI, TI, S2I, S6I, FI, ClI, BrI, LiI, MgI, Fe2I, Fe3I, MnI, SiI, ZnI, BaI, PbI, AlkI, unit_selected_inj  
    for name in inj_entries:  
        globals()[name] = inj_entries[name].get()  
    unit_selected_inj = units_var_inj.get()  # Save the selected unit  
    messagebox.showinfo("Success", f"Injection well ({IDI}) fluid composition saved successfully")  

# --- Buttons ---  
add = customtkinter.CTkButton(compositionI, text="Add", command=lambda: [regcompinj(), compositionI.quit()])  
clear = customtkinter.CTkButton(compositionI, text="Clear", command=ClearI)  
exitb = customtkinter.CTkButton(compositionI, text="Exit", command=compositionI.quit)  

# Placing the buttons below the entries  
add.grid(row=22, column=0, columnspan=2)  
clear.grid(row=23, column=0, columnspan=2)  
exitb.grid(row=24, column=0, columnspan=2)  

compositionI.mainloop()


# --- Gas Composition GUI ---
composition_gas = customtkinter.CTk()
composition_gas.title("Composition of Reservoir Gas - Separated Gas in %")
composition_gas.geometry("400x300")

gas_labels = ["Oxygen (%): ", "Nitrogen (%): ", "Methane (%): ", "Carbon-dioxide (%): "]
gas_entries = {}

for i, text in enumerate(gas_labels):
    customtkinter.CTkLabel(composition_gas, text=text).grid(row=i, column=0)
    entry = Entry(composition_gas, width=30, borderwidth=3)
    entry.grid(row=i, column=1)
    gas_entries[i] = entry
    entry.insert(0, "0")

def Clear_gas():
    for entry in gas_entries.values():
        entry.delete(0, END)

def regcompgas():
    global O2, CH4, N2, CO2
    O2 = gas_entries[0].get()
    N2 = gas_entries[1].get()
    CH4 = gas_entries[2].get()
    CO2 = gas_entries[3].get()
    messagebox.showinfo("Success", "Reservoir gas composition saved")

add = customtkinter.CTkButton(composition_gas, text="Add", command=lambda: [regcompgas(), composition_gas.quit()])
clear = customtkinter.CTkButton(composition_gas, text="Clear", command=Clear_gas)
exitb = customtkinter.CTkButton(composition_gas, text="Exit", command=composition_gas.quit)

add.grid(row=4, column=0, columnspan=2)
clear.grid(row=5, column=0, columnspan=2)
exitb.grid(row=6, column=0, columnspan=2)

composition_gas.mainloop()

# List of minerals excluding gaseous ones (those with '(g)')
minerals = [
"Al(OH)3(a)", "Albite", "Alunite", "Anhydrite", "Anglesite", "Anorthite", 
"Aragonite", "Barite", "Calcite", "Ca-Montmorillonite", "Celestite", "Cerussite", 
"Chalcedony", "Chlorite(14A)", "Chrysotile", "Cd(OH)2", "CdSiO3", "CdSO4", 
"Dolomite", "Fe(OH)3(a)", "FeS(ppt)", "Fluorite", "Gibbsite", "Gypsum", 
"Halite", "Hausmannite", "Hematite", "Hydroxyapatite", "Illite", "Jarosite-K", 
"K-feldspar", "K-mica", "Kaolinite", "Magnetite", "Mackinawite", "Melanterite", 
"Manganite", "Otavite", "Pyrite", "Pyrochroite", "Pyrolusite", "Quartz", 
"Rhodochrosite", "Sepiolite", "Sepiolite(d)", "Siderite", "SiO2(a)", 
"Smithsonite", "Sphalerite", "Strontianite", "Sulfur", "Sylvite", "Talc", 
"Vivianite", "Willemite", "Witherite", "Zn(OH)2(e)"

]

# Initialize the main CustomTkinter window as "reservoir"
customtkinter.set_appearance_mode("System")  # Modes: "System" (default), "Dark", "Light"
customtkinter.set_default_color_theme("blue")  # Customize the color theme

reservoir = customtkinter.CTk()  # Create the CustomTkinter main window
reservoir.title("Mineral Selector")
reservoir.geometry("400x600")  # Set the window size

# Function to get selected minerals and save them as variables
def get_selected_minerals():
    selected_indices = mineral_listbox.curselection()
    selected_minerals = [minerals[i] for i in selected_indices]

    # Update the label to show the selected minerals
    selected_label.configure(text=f"Selected Minerals: {', '.join(selected_minerals)}")
    
    # Saving selected minerals as variables
    save_selected_minerals_as_variables(selected_minerals)

# Function to save selected minerals as variables
def save_selected_minerals_as_variables(selected_minerals):
    # Fill the list with `#` if less than 8 minerals are selected
    while len(selected_minerals) < 8:
        selected_minerals.append('#')

    # Save each mineral as a separate variable
    for i, mineral in enumerate(selected_minerals[:8], start=1):
        # Create a variable name like "reservoir_mineral_1", "reservoir_mineral_2", etc.
        globals()[f'reservoir_mineral_{i}'] = mineral
    
    # Print the variables for demonstration (You can remove this in production)
    for i in range(1, 9):  # Always print all 8 variables
        print(f'reservoir_mineral_{i} =', globals()[f'reservoir_mineral_{i}'])

# Label for multi-selection of minerals
label = customtkinter.CTkLabel(reservoir, text="Select Minerals:")
label.pack(pady=(20, 10))

# Create a standard tkinter Listbox for multi-selection
mineral_listbox = Listbox(reservoir, selectmode="multiple", height=20, width=30)
for mineral in minerals:
    mineral_listbox.insert(END, mineral)
mineral_listbox.pack(pady=(0, 20))

# Button to save selections
save_button = customtkinter.CTkButton(reservoir, text="Save Selection", command=get_selected_minerals)
save_button.pack(pady=(10, 20))

# Label to display selected minerals
selected_label = customtkinter.CTkLabel(reservoir, text="Selected Minerals: None")
selected_label.pack(pady=(0, 20))

# Run the CustomTkinter main loop
reservoir.mainloop()


# --- Parameters GUI ---
window = customtkinter.CTk()
window.title("Parameters")
window.geometry("400x600")

params_labels = [
    "Flow rate (l/min):", "Initial porosity:", "Gravel pack diameter out (m):",
    "Gravel pack diameter in (m):", "Sphericity:", "Average grain size of gravel pack:",
    "Screened length (m):", "Reinjection temperature (°C):", "Reservoir temperature (°C):"
]
params_entries = {}

for text in params_labels:
    customtkinter.CTkLabel(window, text=text).pack()
    entry = Entry(window)
    entry.pack()
    params_entries[text] = entry

# Default values
defaults = [
    "350", "0.3", "0.22", "0.114", "1", "0.0015", "75.5", "25", "100"
]
for (key, val) in zip(params_entries, defaults):
    params_entries[key].insert(0, val)

checkbox_var = IntVar()
fluid_air_contact = ""

def update_fluid_air_contact():
    global fluid_air_contact
    if checkbox_var.get():
        fluid_air_contact = """
use solution 1

GAS_PHASE 1
-fixed pressure
-pressure    1.013
-temperature 20
O2(g) 0.21224
CO2(g) 0.0004052
N2(g) 0.7904


end
Save solution 1
"""
    else:
        fluid_air_contact = "#"

checkbox = customtkinter.CTkCheckBox(window, text="System is open to air", variable=checkbox_var, command=update_fluid_air_contact)
checkbox.pack(pady=20)

def register():
    global flowrate, porosity, gp_diameter_out, gp_diameter_in, sphericity, grainsize, screened_length, reinjection_temp, reservoir_temp
    flowrate = params_entries["Flow rate (l/min):"].get()
    porosity = params_entries["Initial porosity:"].get()
    gp_diameter_out = params_entries["Gravel pack diameter out (m):"].get()
    gp_diameter_in = params_entries["Gravel pack diameter in (m):"].get()
    sphericity = params_entries["Sphericity:"].get()
    grainsize = params_entries["Average grain size of gravel pack:"].get()
    screened_length = params_entries["Screened length (m):"].get()
    reinjection_temp = params_entries["Reinjection temperature (°C):"].get()
    reservoir_temp = params_entries["Reservoir temperature (°C):"].get()
    messagebox.showinfo("Success", "Operational parameters saved")

submit_button = customtkinter.CTkButton(window, text="Submit", command=lambda: [register(), window.quit()])
submit_button.pack()

window.mainloop()


# --- Float conversion simplified ---
float_vars = [
    "flowrate", "porosity", "gp_diameter_in", "gp_diameter_out",
    "sphericity", "grainsize", "screened_length", "reinjection_temp", "reservoir_temp",
    "CaP", "NaP", "KP", "pHP", "TP", "S2P", "S6P", "FP", "ClP", "BrP", "LiP", "MgP",
    "Fe2P", "Fe3P", "MnP", "SiP", "ZnP", "BaP", "PbP", "AlkP"
]

for var in float_vars:
    globals()[var] = float(globals()[var])

# Gas pressures
O2 = 1013/100 * float(O2)/1000
N2 = 1013/100 * float(N2)/1000
CO2 = 1013/100 * float(CO2)/1000
CH4 = 1013/100 * float(CH4)/1000


command = f"""
SOLUTION 1 #production well fluid (on surface)(Parameter 1) (MODEL STEP 1)
pH {pHP}
temp {TP}    #TEMPERATURE TO CHANGE (Parameter 3)
units {unit_selected_prod}
#-water    1 # kg
redox S(-2)/S(6)
S(-2) {S2P}
S(6) {S6P}
F	{FP}
Cl	{ClP} 
Br	{BrP}
Li	{LiP}
Na	{NaP}
K	{KP}
Ca	{CaP}
Mg	{MgP}
Fe(3) {Fe3P}
Fe(2) {Fe2P}
Mn	{MnP}
Si 	{SiP} as H2SiO3
Zn	{ZnP}
Ba	{BaP}
Pb	{PbP}
Alkalinity {AlkP} as HCO3-

end
save solution 1

{fluid_air_contact} #adding gas phase representing air, if system is opened to air

Use solution 1

EQUILIBRIUM_PHASES 1
    Fe(OH)3(a)  0 0 precipitate_only
Calcite 0 0 precipitate_only
save solution 1

end

use solution 1 
REACTION_TEMPERATURE 1 #heat use at the heating system (Model step 2)
    {TP}  {reinjection_temp}


save solution 1
end

SOLUTION 2 #Fluid in the injection well (Parameter 1) (MODEL STEP 4)
pH {pHI}
temp {RT}    #RESERVOIR TEMPERATURE
units {unit_selected_inj}
#-water    1 # kg
redox S(-2)/S(6)
S(-2) {S2I}
S(6) {S6I}
F    {FI}
Cl   {ClI} 
Br   {BrI}
Li   {LiI}
Na   {NaI}
K    {KI}
Ca   {CaI}
Mg   {MgI}
Fe(3) {Fe3I}
Fe(2) {Fe2I}
Mn   {MnI}
Si   {SiI} as H2SiO3
Zn   {ZnI}
Ba   {BaI}
Pb   {PbI}
Alkalinity {AlkI} as HCO3-


GAS_PHASE 2 #gas phase in the injection well (Parameter 1)
-fixed pressure
-pressure 1.013
O2(g) {O2}
CO2(g) {CO2}
N2(g) {N2}
CH4(g) {CH4}

EQUILIBRIUM_PHASES 1
   {reservoir_mineral_1}    0 10
   {reservoir_mineral_2}    0 10
   {reservoir_mineral_3}    0 10
   {reservoir_mineral_4}    0 10
   {reservoir_mineral_5}    0 10
   {reservoir_mineral_6}    0 10
   {reservoir_mineral_7}    0 10
   {reservoir_mineral_8}    0 10
end

Save solution 2
end

#Mixing by using Solution 1 and 2 (MODEL STEP 4)

MIX 1	;1	0.1	;2	0.9	;SAVE SOLUTION 3	;END
MIX 2	;1	0.2	;3	0.8	;SAVE SOLUTION 4	;END
MIX 3	;1	0.3	;4	0.7	;SAVE SOLUTION 5	;END
MIX 4	;1	0.4	;5	0.6	;SAVE SOLUTION 6	;END
MIX 5	;1	0.5	;6	0.5	;SAVE SOLUTION 7	;END

use Solution 7

EQUILIBRIUM_PHASES 2
Fe(OH)3(a) 0 0 precipitate_only
Calcite 0 0 precipitate_only

SELECTED_OUTPUT 1
    -file                 output.sel
    -reset                false
    -equilibrium_phases   Calcite  Fe(OH)3(a)
"""
flowrate_day = flowrate*24*60
inputname = f"{IDI}_{IDP}.dat"

print(command)
datainput = StringIO(command)
df3 = pd.read_csv(datainput, on_bad_lines='warn')
df3.to_csv(inputname,index=False) 

phreeqc_command=f"C:/phreeqc/phreeqc.exe {inputname} output.dat PHREEQC_mod_with_magnetite_without_feoh3.DAT"


os.system(phreeqc_command)
out = pd.read_fwf("output.sel", colspecs='infer')

Calcite_molL = out["Calcite"][0]
ironhydro_molL = out["Fe(OH)3(a)"][0]

Calcite_density = 2.71 #g/cm3
Calcite_molarweight = 68.78 # g/mol

ironhydro_density = 3.4 #g/cm3
ironhydro_molarweight = 106 #"g/mol

Calcite_vld = Calcite_molL*Calcite_molarweight/Calcite_density/1000*flowrate_day/1000 #Calcite formed per day m3
ironhydro_vld = ironhydro_molL*ironhydro_molarweight/ironhydro_density/1000*flowrate_day/1000 #FeOOH3 formed per day m3

gp_diameter_in = float(gp_diameter_in)
gp_diameter_out = float(gp_diameter_out)
screened_length = float(screened_length)
ringv = (gp_diameter_out/2)**2*3.14*screened_length-(gp_diameter_in/2)**2*3.14*screened_length #ring space volume CALCULATE FROM INPPUT

iniporvol = ringv * porosity

endtime = iniporvol/(Calcite_vld+ironhydro_vld)
steps = round(endtime / 5)

T = np.linspace(0, endtime, num=steps) #numpy.linspace(start, stop, num=50, endpoint=True , retstep=False, dtype=None, axis=0)

dT = T[1]
porosity = 0.3
iniporvol = ringv * porosity

newporvol = [0] * len(T)

newporvol[0] = iniporvol

for j in range(1,len(T)):
    newporvol[j] = newporvol[j-1]-dT*(Calcite_vld+ironhydro_vld)

newporosity = np.asarray(newporvol)/np.asarray(ringv)
print(newporosity)

perm = (sphericity)**2*((newporosity)**3*(grainsize)**2)/(180*(1-newporosity)**2)


plt.plot(T,(newporosity))
plt.plot(T,(perm))
plt.yscale('log')
#print(df2)

fig, ax1 = plt.subplots()
ig, ax1 = plt.subplots()

# Plot newporosity as a line
ax1.plot(T, newporosity, 'g-', label="Porosity")  # Just the line
# Add markers only at every 10th data point
ax1.scatter(T[::3], newporosity[::3], color='g', marker='o', s=5)

ax1.set_xlabel('Time (Days)')
ax1.set_ylabel('Porosity, ϵ [-]', color='g')
ax1.tick_params(axis='y', labelcolor='g')

# Create a secondary y-axis for perm
ax2 = ax1.twinx()
ax2.plot(T, perm, 'b-', label="Permeability")  # Just the line
# Add markers only at every 10th data point
ax2.scatter(T[::3], perm[::3], color='b', marker='o', s=5)

ax2.set_ylabel('Permeability, K $[m^2]$', color='b')
ax2.tick_params(axis='y', labelcolor='b')

# Set the secondary y-axis (for perm) to logarithmic
ax2.set_yscale('log')


zero_porosity_time = np.ceil(T[np.where(newporosity <= 0)[0]])
# Add a vertical line where porosity reaches zero

if zero_porosity_time.size > 0:  # Check if there is at least one occurrence
    plt.axvline(x=zero_porosity_time[0], color='r', linestyle='--', label=f'Porosity = 0 at {zero_porosity_time[0]:.0f} days', linewidth=2, alpha=0.7)

# Add the legend, ensuring it includes all labels
ax1.legend(loc='lower center', bbox_to_anchor=(0.1, -0.4), frameon=True)
ax2.legend(loc='lower left', bbox_to_anchor=(0.3, -0.4), frameon=True)
# Adjust layout to make space for the legend
plt.tight_layout()


#plt.title("Porosity and permeability degradation over time")
plt.show()
